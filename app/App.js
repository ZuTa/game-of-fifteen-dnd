import EmptyTile from './EmptyTile';import HTML5Backend from 'react-dnd-html5-backend';import React, { Component } from 'react';import Tile from './Tile';import Utils from './utils';import { DragDropContext } from 'react-dnd';import { render } from 'react-dom';const newGame = (dimension, level) => {  let tiles = Utils.generateGame(dimension, level);  for (; Utils.isValid(tiles); tiles = Utils.generateGame(dimension, level)) {}  return {    dimension,    tiles,    level,    moves: 0,   };};class Game extends React.Component {  constructor(props) {    super(props);    this.state = newGame(3, 0);  }  render() {    const { level, moves, dimension, tiles } = this.state;    const isValid = Utils.isValid(tiles);    const rows = [];    for (let i = 0; i < dimension; i++) {      let rowTiles = [];      for (let j = 0; j < dimension; j++) {        const index = i * dimension + j;        let tile = <EmptyTile key={index} />;        if (tiles[index] !== dimension * dimension) {          tile = (            <Tile              key={index}              x={i}              y={j}              value={tiles[index]}              canMove={Utils.canMove(tiles, i, j) && !isValid}              onMove={(x, y) => this._onTileMove(x, y)}            />          );        }        rowTiles.push(tile);      }      rows.push(<div className="row" key={i}>{rowTiles}</div>);    }    let won = null;    if (isValid) {      won = (        <div className="winner">          Congratulations! You made it in {moves} moves.          <input            className="restart"            type="button"            value="Restart"            onClick={() => this.setState(newGame(dimension, level))}          />        </div>      );    }    return (      <div className={isValid ? "game win" : "game"}>        <div className="dimension">          Select dimension:          <select            className="selector"            onChange={e => this.setState(newGame(Utils.DIMENSIONS[e.target.selectedIndex], level))}>            {Utils.DIMENSIONS.map(d => <option key={d} value={d}>{d}</option>)}          </select>        </div>        <div className="dimension">          Select level:          <select            className="selector"            onChange={e => this.setState(newGame(dimension, e.target.selectedIndex))}>            <option key={0} value={0}>Easy</option>            <option key={1} value={1}>Normal</option>            <option key={2} value={2}>Hard</option>          </select>        </div>        {won}        {rows}      </div>    );  }  _onTileMove(x, y) {    const { moves, dimension, tiles } = this.state;    this.setState({      tiles: Utils.swap(tiles, x * dimension + y, Utils.getEmptyIndex(tiles)),      moves: moves + 1,    });  }}Game = DragDropContext(HTML5Backend)(Game);const App = () => (  <div className="app">    <Game />    <div className="footer">      <a href="https://en.wikipedia.org/wiki/15_puzzle">About the Game</a>      &bull;      <a href="https://github.com/ZuTa/game-of-fifteen-dnd">Source Code</a>    </div>  </div>);render(<App />, document.getElementById('root'));